//
//  FavouriteQuotesViewController.swift
//  RandomQuote
//
//  Created by Ravi kumar on 07/08/20.
//  Copyright (c) 2020 Ravi kumar. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FavouriteQuotesDisplayLogic: class
{
    func displayFavourites(viewModel: FavouriteQuotes.Fetch.ViewModel)
}

class FavouriteQuotesViewController: UIViewController, FavouriteQuotesDisplayLogic
{
    var interactor: FavouriteQuotesBusinessLogic?
    var router: (NSObjectProtocol & FavouriteQuotesRoutingLogic & FavouriteQuotesDataPassing)?
    
    // MARK: IB Outlets
    @IBOutlet weak var noRecordLable: UILabel!
    @IBOutlet weak var favouriteQuotesTable: UITableView!
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup()
    {
        let viewController = self
        let interactor = FavouriteQuotesInteractor()
        let presenter = FavouriteQuotesPresenter()
        let router = FavouriteQuotesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    override func viewDidLoad()
    {
        super.viewDidLoad()
        tableViewSetup()
    }
    
    override func viewWillAppear(_ animated:Bool)
    {
        super.viewWillAppear(animated)
        fetchAllFavourites()
    }
    
    func tableViewSetup() {
        self.title = "Favourites"
        favouriteQuotesTable.tableFooterView = UIView()
    }
    
    // MARK: Requesting favourite quotes
    var favouriteQuotes = [FavouriteQuotes.Fetch.ViewModel.DisplaybleItem]()
    func fetchAllFavourites()
    {
        let request = FavouriteQuotes.Fetch.Request()
        interactor?.fetchAllFavouriteQuotes(request: request)
    }
    
    // MARK: FavouriteQuotesDisplayLogic
    func displayFavourites(viewModel: FavouriteQuotes.Fetch.ViewModel)
    {
        favouriteQuotes = viewModel.quotes
        if favouriteQuotes.count == 0 {
            noRecordLable.isHidden = false
        }
        else {
            noRecordLable.isHidden = true
        }
        favouriteQuotesTable.reloadData()
    }
}

// MARK: UITableViewDelegate
extension FavouriteQuotesViewController:UITableViewDelegate{
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let data = favouriteQuotes[indexPath.row]

        let request = FavouriteQuotes.Fetch.PassingRequest(id:data.id)
        interactor?.updateFavouriteQuote(request: request)
        router?.routeToSelectedQoutes()
    }
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 45
    }
}

// MARK: UITableViewDataSource
extension FavouriteQuotesViewController:UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        favouriteQuotes.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "FavouriteCell", for: indexPath) as! FavouriteTableViewCell
        cell.setupCell(item: favouriteQuotes[indexPath.row])
         return cell
    }
    
    
}
