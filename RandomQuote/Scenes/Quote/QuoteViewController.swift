//
//  QuoteViewController.swift
//  RandomQuote
//
//  Created by Ravi kumar on 07/08/20.
//  Copyright (c) 2020 Ravi kumar. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol QuoteDisplayLogic: class
{
    func displayFavourite(viewModel: RandomQuote.ShowFavouriteOption.ViewModel)
    func displayErrorOnFailure(viewModel: RandomQuote.Fetch.ViewModel)
    func displayNewQuote(viewModel:RandomQuote.Fetch.ViewModel)
    func displayUpdatedFavouritQuote(viewModel:RandomQuote.Fetch.ViewModel)
}

class QuoteViewController: UIViewController, QuoteDisplayLogic
{
    var interactor: QuoteBusinessLogic?
    var router: (NSObjectProtocol & QuoteRoutingLogic & QuoteDataPassing)?
    
    
    // MARK: Outlets
    @IBOutlet weak var favButton: UIButton!
    @IBOutlet weak var quoteLabel: UILabel!
    @IBOutlet weak var authorNameLabel: UILabel!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = QuoteInteractor()
        let presenter = QuotePresenter()
        let router = QuoteRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        checkIfFavouritesNeedsToBeShown()
    }
    
    // MARK: Button Actioins
    var viewModel = RandomQuote.Fetch.ViewModel()
    
    @IBAction func favouritesTapped() {
        router?.routeToFavourites()
    }
    
    @IBAction func favouriteButtonAction(_ sender: UIButton) {
        updateFavouriteTo(isFav: !sender.isSelected)
    }
    
    
     // MARK: Redering information
    private func renderDetails(){
        guard let author = viewModel.author, let quote = viewModel.quote else {
            return
        }
        activityIndicator.stopAnimating()
        self.authorNameLabel.text = "-- \(author)"
        self.quoteLabel.text = quote
        self.favButton.isHidden = false
        self.favButton.isSelected = viewModel.isFavourite ?? false
    }
    
     // MARK: Fetching & updating data
    func checkIfFavouritesNeedsToBeShown()
    {
        let request = RandomQuote.ShowFavouriteOption.Request()
        interactor?.checkFavouriteOption(request: request)
    }
    
    func requestRandomQuote() {
        activityIndicator.startAnimating()
        let request = RandomQuote.Fetch.Request()
        interactor?.fetchQuote(request: request)
    }
    
    func requestQuoteFor(id:String) {
        let request = RandomQuote.Fetch.UpdateFavouriteRequest(id: id)
        interactor?.getSelectedFavouriteQuote(request: request)
    }
    
    func updateFavouriteTo(isFav:Bool) {
        let request = RandomQuote.Fetch.UpdateFavouriteRequest(id: self.viewModel.id!, isFav: isFav)
        interactor?.updateFavourite(request: request)
    }
    
     // MARK: QuoteDisplayLogic methods
    func displayFavourite(viewModel: RandomQuote.ShowFavouriteOption.ViewModel)
    {
        if !viewModel.hideFavourites{
            requestRandomQuote()
            navigationItem.rightBarButtonItem = UIBarButtonItem(title: "Favourites", style: .plain, target: self, action: #selector(favouritesTapped))
        }
        requestQuoteFor(id:viewModel.id)
    }
    
    func displayErrorOnFailure(viewModel: RandomQuote.Fetch.ViewModel) {
        activityIndicator.stopAnimating()
        print(viewModel.errorMessage!)
    }
    
    func displayNewQuote(viewModel: RandomQuote.Fetch.ViewModel) {
        self.viewModel = viewModel
        renderDetails()
    }
    
    func displayUpdatedFavouritQuote(viewModel: RandomQuote.Fetch.ViewModel) {
        self.viewModel = viewModel
        renderDetails()
    }
}
