//
//  QuoteInteractor.swift
//  RandomQuote
//
//  Created by Ravi kumar on 07/08/20.
//  Copyright (c) 2020 Ravi kumar. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Reachability
protocol QuoteBusinessLogic
{
    func checkFavouriteOption(request: RandomQuote.ShowFavouriteOption.Request)
    func fetchQuote(request: RandomQuote.Fetch.Request)
    func updateFavourite(request: RandomQuote.Fetch.UpdateFavouriteRequest)
    func getSelectedFavouriteQuote(request: RandomQuote.Fetch.UpdateFavouriteRequest)
}

protocol QuoteDataStore
{
    var hideFavourites: Bool { get set }
    var favouriteQuoteID: String {get set}
}

class QuoteInteractor: QuoteBusinessLogic, QuoteDataStore
{
    var presenter: QuotePresentationLogic?
    var workerAPI: QuoteAPIWorker?
    var workerDB: QuoteDBWorker?
    var hideFavourites: Bool = false
    var favouriteQuoteID = ""
    
    
    // MARK: Do something
    
    func checkFavouriteOption(request: RandomQuote.ShowFavouriteOption.Request)
    {
        
        let response = RandomQuote.ShowFavouriteOption.Response(hideFavourites: hideFavourites, id: favouriteQuoteID)
        presenter?.presentQuoteFavouriteOption(response: response)
    }
    
    func fetchQuote(request: RandomQuote.Fetch.Request) {
        workerAPI = QuoteAPIWorker()
        workerDB = QuoteDBWorker()
        let reachability = try! Reachability()
        
        if(reachability.connection == .unavailable){
            let quote =  self.workerDB?.getRecentCachedQuote()
            let response = RandomQuote.Fetch.Response(err: nil, quote: quote)
            self.presenter?.presentNewQuote(response: response)
        }else{
            self.workerAPI?.fetchQuote(success: { [unowned self] (quoteJson) in
                DispatchQueue.main.async {
                    let response = RandomQuote.Fetch.Response(err: nil, quote: self.workerDB?.addQuoteInDB(json: quoteJson))
                    self.presenter?.presentNewQuote(response: response)
                }
            }, failure: { (error) in
                DispatchQueue.main.async { [unowned self] in
                    let response = RandomQuote.Fetch.Response(err: error, quote: nil)
                    self.presenter?.presentQuoteFetchFailure(response: response)
                }
            })
        }
    }
    
    func updateFavourite(request: RandomQuote.Fetch.UpdateFavouriteRequest){
        workerDB = QuoteDBWorker()
        let quote = workerDB?.updateQuote(id: request.id, isFav: request.isFav!)
        let response = RandomQuote.Fetch.Response(err: nil, quote: quote)
        self.presenter?.presentUpdatedQuote(response: response)
    }
    
    func getSelectedFavouriteQuote(request: RandomQuote.Fetch.UpdateFavouriteRequest) {
        workerDB = QuoteDBWorker()
        let quote = workerDB?.getQuote(id: request.id)
        let response = RandomQuote.Fetch.Response(err: nil, quote: quote)
        self.presenter?.presentUpdatedQuote(response: response)
    }
}
